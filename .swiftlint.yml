# SwiftLint config
# Matthias Ferber 

included:

excluded:
  - Carthage

disabled_rules:
  - closure_parameter_position  # allow params on new line when necessary
  - force_cast  # allow forced casts when necessary
  - force_try  # allow forced try { } when necessary
  - force_unwrapping  # allow forced unwrapping of optionals when necessary
  - large_tuple  # allow any tuple size
  - opening_brace  # allow opening brace on new line when necessary
  - statement_position  # allow else/catch on new line when necessary
  - todo  # flagging TODO/FIXME comments just creates unhelpful background noise
  - trailing_comma  # allow trailing commas in arrays and dictionaries on a case-by-case basis
  - untyped_error_in_catch  # don't specify identifier to capture error in when catching untyped (catchall) errors
  - yoda_condition  # disallow C convention for comparisons: 'if 0 == x'

opt_in_rules:
  - closure_end_indentation  # ensure closure } lines up with {
  - closure_spacing  # single space inside each brace
  - contains_over_first_not_nil  # prefer .contains to .first(where)!=nil (performance)
  - convenience_type  # use enum, not struct, for namespacing constants
  - empty_count  # (error by default) prefer .isEmpty to .count == 0
  - empty_xctest_method  # flag empty methods in XCTest cases
  - explicit_init  # discourage explicit Class.init() calls
  - explicit_top_level_acl  # encourage access modifier on top-level symbols
  - fallthrough  # discourage fallthrough
  - fatal_error_message  # fatalError must have message
  - first_where  # prefer .first(where) to .filter().first (performance)
  - literal_expression_end_indentation  # indent closing ] or } with opening one in collection literal
  - lower_acl_than_parent  # prevent a less accessible identifier from containing a more accessible one
  - modifier_order  # enforce consistent modifier order, e.g. "override public final"
  - no_extension_access_modifier  # never allow access modifier on extension, only on methods
  - operator_usage_whitespace  # use one space around (most) operators
  - overridden_super_call  # check for super() in certain overridden methods
  - pattern_matching_keywords  # In 'case' patterns, move let and var out of tuples to the case itself, when there's > 1 and all are the same
  - private_action  # keep @IBActions private
  - private_outlet  # keep @IBOutlets private
  - prohibited_super_call  # don't call super() for certain overridden methods
  - quick_discouraged_focused_test  # in Quick tests, alert when a describe, context, or test is focused, blocking other tests
  - quick_discouraged_pending_test  # in Quick tests, alert when a describe, context, or test is temporarily blocked (xdescribe, etc.)
  - sorted_first_last  # use min()/max() over sorted().first/last (performance)
  - unavailable_function  # make unimplemented functions also uncallable
  - unneeded_parentheses_in_closure_argument  # discourage parens around args when types aren't specified
  - vertical_parameter_alignment  # left-align function parameters in a declaration
  - vertical_parameter_alignment_on_call  # left-align function parameters in a call
  - weak_delegate  # require vars containing "delegate" to be declared weak

# Specific rule configurations

cyclomatic_complexity:
  ignores_case_statements: true
empty_enum_arguments: error
empty_parameters: error
empty_parentheses_with_trailing_closure: error
empty_string: error
explicit_init: error
fatal_error_message: error
file_length:
  ignore_comment_only_lines: true
first_where: error
line_length:
  warning: 120  # this is the default but let's be explicit
  error: 150
type_name:
  max_length:
    warning: 50  # relaxed a bit to allow for very descriptive type names when needed
unused_closure_parameter: error
unused_enumerated: error
unused_optional_binding:
  severity: error
vertical_whitespace:
  max_empty_lines: 2
weak_delegate: error
